"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var https = require('https');
var RequestClient = /*#__PURE__*/function () {
  function RequestClient(publishable_key, secret_key, test_mode) {
    _classCallCheck(this, RequestClient);
    _defineProperty(this, "publishable_key", void 0);
    _defineProperty(this, "secret_key", void 0);
    _defineProperty(this, "prod_base_url", 'payment.intasend.com');
    _defineProperty(this, "test_base_url", 'sandbox.intasend.com');
    _defineProperty(this, "test_mode", true);
    this.publishable_key = publishable_key;
    this.secret_key = secret_key;
    this.test_mode = test_mode;
  }
  return _createClass(RequestClient, [{
    key: "send",
    value: function send(payload, service_path, req_method) {
      var _this = this;
      var method = req_method || 'POST';
      return new Promise(function (resolve, reject) {
        var base_url = _this.prod_base_url;
        if (_this.test_mode) {
          base_url = _this.test_base_url;
        }
        var headers = {
          'Content-Type': 'application/json'
        };
        if (_this.secret_key) {
          headers['Authorization'] = "Bearer ".concat(_this.secret_key);
        }
        if (_this.publishable_key) {
          headers['INTASEND_PUBLIC_API_KEY'] = _this.publishable_key;
          payload['public_key'] = _this.publishable_key;
        }
        var options = {
          hostname: base_url,
          port: 443,
          path: service_path,
          method: method,
          headers: headers
        };
        var req = https.request(options, function (res) {
          if (res.statusCode !== 201 && res.statusCode !== 200) {
            console.error("IntaSend Request HTTP Error Code: ".concat(res.statusCode));
            res.resume();
            res.on('data', function (data) {
              reject(data);
            });
            return;
          }
          var results = '';
          res.on('data', function (data) {
            results += data;
          });
          res.on('end', function () {
            if (results) {
              resolve(JSON.parse(results));
              return;
            }
            resolve({});
          });
        });
        req.on('error', function (err) {
          reject(err.message);
          return;
        });
        if (payload) {
          req.write(JSON.stringify(payload));
        }
        req.end();
      });
    }
  }]);
}();
module.exports = RequestClient;